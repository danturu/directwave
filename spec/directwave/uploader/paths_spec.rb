require "spec_helper"

describe DirectWave::Uploader::Paths do
  before do
    @model = mock("a model object")
    @uploader_class = Class.new(DirectWave::Uploader::Base)
    @uploader = @uploader_class.new(@model, "foo")
  end
  
  describe '#original_filename' do
    it "should return 'foo/bar.aac'" # @uploader.original_filename.should == "foo/bar.aac"
  end
  
  describe "#filename" do
    context "store key is autogenerated" do
      it "should return 'foo'" do
        @uploader.filename.should be_nil
      end
    end

    context "store key is key 's3/key/to/foo/bar.aac' of s3" do
      before { @uploader.store_key = "s3/key/to/foo/bar.aac" }
      
      it "should return 'foo/bar.aac'" do
        @uploader.filename.should == "foo/bar.aac"
      end
    end
  end
  
  describe "#store_key=" do
    before { @uploader.store_key = "foo" }

    it "should set the store key" do
      @uploader.store_key.should == "foo"
    end
  end

  describe "#store_key" do
    context "where the store key is not set and #upload_dir returns 'foo'" do
      before do
        @uploader.stub(:upload_dir).and_return("foo")
        @uploader.stub(:guid).and_return("guid")
        @uploader.store_key = nil
      end

      it "should return 'foo/guid/${filename}'" do
        @uploader.store_key.should =~ /foo\/guid\/\$\{filename\}$/
      end
    end
  end

  describe "#has_store_key?" do
    context "a store_key has not been set" do

      it "should return false" do
        @uploader.should_not have_store_key
      end
    end

    context "the store_key has been autogenerated" do
      before { @uploader.store_key }

      it "should return false" do
        @uploader.should_not have_store_key
      end
    end

    context "the store_key has been set" do
      before { @uploader.store_key = "foo" }

      it "should return true" do
        @uploader.should have_store_key
      end
    end
  end
end